// Code generated by protoc-gen-go. DO NOT EDIT.
// source: some.proto

package some

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SomeRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SomeRequest) Reset()         { *m = SomeRequest{} }
func (m *SomeRequest) String() string { return proto.CompactTextString(m) }
func (*SomeRequest) ProtoMessage()    {}
func (*SomeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c56c7fe3a430609a, []int{0}
}

func (m *SomeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SomeRequest.Unmarshal(m, b)
}
func (m *SomeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SomeRequest.Marshal(b, m, deterministic)
}
func (m *SomeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SomeRequest.Merge(m, src)
}
func (m *SomeRequest) XXX_Size() int {
	return xxx_messageInfo_SomeRequest.Size(m)
}
func (m *SomeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SomeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SomeRequest proto.InternalMessageInfo

func (m *SomeRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type SomeResponse struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SomeResponse) Reset()         { *m = SomeResponse{} }
func (m *SomeResponse) String() string { return proto.CompactTextString(m) }
func (*SomeResponse) ProtoMessage()    {}
func (*SomeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c56c7fe3a430609a, []int{1}
}

func (m *SomeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SomeResponse.Unmarshal(m, b)
}
func (m *SomeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SomeResponse.Marshal(b, m, deterministic)
}
func (m *SomeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SomeResponse.Merge(m, src)
}
func (m *SomeResponse) XXX_Size() int {
	return xxx_messageInfo_SomeResponse.Size(m)
}
func (m *SomeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SomeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SomeResponse proto.InternalMessageInfo

func (m *SomeResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*SomeRequest)(nil), "some.SomeRequest")
	proto.RegisterType((*SomeResponse)(nil), "some.SomeResponse")
}

func init() {
	proto.RegisterFile("some.proto", fileDescriptor_c56c7fe3a430609a)
}

var fileDescriptor_c56c7fe3a430609a = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xcf, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x14, 0xb9, 0xb8, 0x83, 0xf3,
	0x73, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b,
	0x12, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x25, 0x2e, 0x1e, 0x88, 0x92,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x6c, 0x6a, 0x8c, 0x2a, 0xb8, 0xd8, 0x83, 0x53, 0x8b, 0xca,
	0x32, 0x93, 0x53, 0x85, 0x0c, 0xb8, 0xd8, 0xc1, 0xca, 0x03, 0x9c, 0x85, 0x04, 0xf5, 0xc0, 0xf6,
	0x21, 0x59, 0x20, 0x25, 0x84, 0x2c, 0x04, 0x35, 0xd0, 0x9a, 0x4b, 0x00, 0xc4, 0x0f, 0x2e, 0x29,
	0x4a, 0x4d, 0xcc, 0xcd, 0xcc, 0x4b, 0x27, 0x5e, 0xab, 0x06, 0x63, 0x12, 0x1b, 0xd8, 0x37, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x73, 0x3b, 0x52, 0xdb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	SomeRPC(ctx context.Context, in *SomeRequest, opts ...grpc.CallOption) (*SomeResponse, error)
	SomeStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (Service_SomeStreamingRPCClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) SomeRPC(ctx context.Context, in *SomeRequest, opts ...grpc.CallOption) (*SomeResponse, error) {
	out := new(SomeResponse)
	err := c.cc.Invoke(ctx, "/some.Service/SomeRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SomeStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (Service_SomeStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/some.Service/SomeStreamingRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceSomeStreamingRPCClient{stream}
	return x, nil
}

type Service_SomeStreamingRPCClient interface {
	Send(*SomeRequest) error
	CloseAndRecv() (*SomeResponse, error)
	grpc.ClientStream
}

type serviceSomeStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *serviceSomeStreamingRPCClient) Send(m *SomeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceSomeStreamingRPCClient) CloseAndRecv() (*SomeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	SomeRPC(context.Context, *SomeRequest) (*SomeResponse, error)
	SomeStreamingRPC(Service_SomeStreamingRPCServer) error
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) SomeRPC(ctx context.Context, req *SomeRequest) (*SomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SomeRPC not implemented")
}
func (*UnimplementedServiceServer) SomeStreamingRPC(srv Service_SomeStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method SomeStreamingRPC not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_SomeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SomeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/some.Service/SomeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SomeRPC(ctx, req.(*SomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SomeStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).SomeStreamingRPC(&serviceSomeStreamingRPCServer{stream})
}

type Service_SomeStreamingRPCServer interface {
	SendAndClose(*SomeResponse) error
	Recv() (*SomeRequest, error)
	grpc.ServerStream
}

type serviceSomeStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *serviceSomeStreamingRPCServer) SendAndClose(m *SomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceSomeStreamingRPCServer) Recv() (*SomeRequest, error) {
	m := new(SomeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "some.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SomeRPC",
			Handler:    _Service_SomeRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SomeStreamingRPC",
			Handler:       _Service_SomeStreamingRPC_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "some.proto",
}
